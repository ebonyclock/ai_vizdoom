#!/usr/bin/python

import pickle
import matplotlib as mpl
import numpy as np
from matplotlib import pyplot as plt
import argparse
from matplotlib.lines import Line2D
from random import shuffle

def marker():
    markers = ["o", "v", "*", "<", "h", ">", "p", "s"]
    while True:
        for m in markers:
            yield m


marker = marker()

mpl.style.use('ggplot')

parser = argparse.ArgumentParser(description='This scprit plots results generated by learn.py.')
parser.add_argument('files', type=str, nargs="+", default=None, help='file(s) with results')
group = parser.add_mutually_exclusive_group()
group.add_argument('--stats', "-s", metavar='<STAT>', dest="stats", type=str, nargs="+",
                   default=["mean"],
                   help="plot fiven stats e.g. mean, train_mean, std ...")
group.add_argument('--list', dest='list', action='store_const',
                   const=True, default=False,
                   help='lists available stats for all files and exit')
group.add_argument('--x-resolution', "-r", metavar='<X_RESOLUTION>', dest="x_res", type=str, nargs=1,
                   default=[1000000],
                   help="interval for x axis in number of training actions (default: 1000000)")
args = parser.parse_args()

show_plot = False
x_res = np.float(args.x_res[0])
for filename in args.files:
    d = pickle.load(open(filename, "r"))
    if args.list:
        print filename
        for term in d:
            if type(term) == type(list()):
                print "\t", term
    else:
        mil_steps = np.array(d["actions"]) / x_res

        for stat in args.stats:
            if stat not in d:
                print stat, " stat not found in", filename
                continue
            label = filename
            if len(args.stats) > 1:
                label += "_" + stat.upper()
            plt.plot(mil_steps, d[stat], marker=next(marker), label=label, linewidth=1.5)
            show_plot = True

if show_plot:
    plt.xlabel('1e6 actions')
    legend = plt.legend(loc='lower right', fancybox=True, shadow=True).draggable()
    plt.show()
else:
    print "No valid file/stat. Exiting."
# plt.savefig("defend_the_line.pdf")
